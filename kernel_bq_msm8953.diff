diff --git a/arch/arm64/configs/bardock_defconfig b/arch/arm64/configs/bardock_defconfig
index c16b42933ed..a385679e759 100644
--- a/arch/arm64/configs/bardock_defconfig
+++ b/arch/arm64/configs/bardock_defconfig
@@ -317,8 +317,8 @@ CONFIG_FINGERPRINT_GOODIX_GF3208=y
 CONFIG_FINGERPRINT_CS_FINGER=y
 # CONFIG_VT is not set
 # CONFIG_LEGACY_PTYS is not set
-# CONFIG_DEVMEM is not set
-# CONFIG_DEVKMEM is not set
+CONFIG_DEVMEM=y
+CONFIG_DEVKMEM=y
 # CONFIG_SERIAL_MSM_HS is not set
 CONFIG_SERIAL_MSM_SMD=y
 CONFIG_DIAG_CHAR=y
diff --git a/arch/arm64/configs/bardockpro_defconfig b/arch/arm64/configs/bardockpro_defconfig
index b2356ffce71..386168af61e 100644
--- a/arch/arm64/configs/bardockpro_defconfig
+++ b/arch/arm64/configs/bardockpro_defconfig
@@ -317,8 +317,8 @@ CONFIG_FINGERPRINT_GOODIX_GF3208=y
 CONFIG_FINGERPRINT_CS_FINGER=y
 # CONFIG_VT is not set
 # CONFIG_LEGACY_PTYS is not set
-# CONFIG_DEVMEM is not set
-# CONFIG_DEVKMEM is not set
+CONFIG_DEVMEM=y
+CONFIG_DEVKMEM=y
 # CONFIG_SERIAL_MSM_HS is not set
 CONFIG_SERIAL_MSM_SMD=y
 CONFIG_DIAG_CHAR=y
diff --git a/drivers/misc/qseecom.c b/drivers/misc/qseecom.c
index 84a0a9bbd12..144734c539e 100644
--- a/drivers/misc/qseecom.c
+++ b/drivers/misc/qseecom.c
@@ -109,6 +109,32 @@
 #define DEFAULT_CE_INFO_UNIT 0
 #define DEFAULT_NUM_CE_INFO_UNIT 1
 
+struct __attribute__((packed)) qseecom_send_raw_scm_req {
+        uint32_t svc_id;
+        uint32_t cmd_id;
+        void *cmd_req_buf; /* in */
+        unsigned int cmd_req_len; /* in */
+        void *resp_buf; /* in/out */
+        unsigned int resp_len; /* in/out */
+};
+
+struct __attribute__((packed)) qseecom_send_atomic_scm_req {
+    uint32_t svc_id;
+    uint32_t cmd_id;
+    uint32_t num_args;
+    uint32_t arg1;
+    uint32_t arg2;
+    uint32_t arg3;
+    uint32_t arg4;
+};
+
+
+#define QSEECOM_IOCTL_SEND_RAW_SCM \
+        _IOWR(QSEECOM_IOC_MAGIC, 21, struct qseecom_send_raw_scm_req)
+
+#define QSEECOM_IOCTL_SEND_ATOMIC_SCM \
+	_IOWR(QSEECOM_IOC_MAGIC, 24, struct qseecom_send_atomic_scm_req)
+
 enum qseecom_clk_definitions {
 	CLK_DFAB = 0,
 	CLK_SFPB,
@@ -2711,91 +2737,6 @@ int __qseecom_process_fsm_key_svc_cmd(struct qseecom_dev_handle *data_ptr,
 	return ret;
 }
 
-static int __validate_send_service_cmd_inputs(struct qseecom_dev_handle *data,
-				struct qseecom_send_svc_cmd_req *req)
-{
-	if (!req || !req->resp_buf || !req->cmd_req_buf) {
-		pr_err("req or cmd buffer or response buffer is null\n");
-		return -EINVAL;
-	}
-
-	if (!data || !data->client.ihandle) {
-		pr_err("Client or client handle is not initialized\n");
-		return -EINVAL;
-	}
-
-	if (data->client.sb_virt == NULL) {
-		pr_err("sb_virt null\n");
-		return -EINVAL;
-	}
-
-	if (data->client.user_virt_sb_base == 0) {
-		pr_err("user_virt_sb_base is null\n");
-		return -EINVAL;
-	}
-
-	if (data->client.sb_length == 0) {
-		pr_err("sb_length is 0\n");
-		return -EINVAL;
-	}
-
-	if (((uintptr_t)req->cmd_req_buf <
-				data->client.user_virt_sb_base) ||
-		((uintptr_t)req->cmd_req_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("cmd buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if (((uintptr_t)req->resp_buf <
-				data->client.user_virt_sb_base)  ||
-		((uintptr_t)req->resp_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("response buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if ((req->cmd_req_len == 0) || (req->resp_len == 0) ||
-		(req->cmd_req_len > data->client.sb_length) ||
-		(req->resp_len > data->client.sb_length)) {
-		pr_err("cmd buf length or response buf length not valid\n");
-		return -EINVAL;
-	}
-	if (req->cmd_req_len > UINT_MAX - req->resp_len) {
-		pr_err("Integer overflow detected in req_len & rsp_len\n");
-		return -EINVAL;
-	}
-
-	if ((req->cmd_req_len + req->resp_len) > data->client.sb_length) {
-		pr_debug("Not enough memory to fit cmd_buf.\n");
-		pr_debug("resp_buf. Required: %u, Available: %zu\n",
-				(req->cmd_req_len + req->resp_len),
-					data->client.sb_length);
-		return -ENOMEM;
-	}
-	if ((uintptr_t)req->cmd_req_buf > (ULONG_MAX - req->cmd_req_len)) {
-		pr_err("Integer overflow in req_len & cmd_req_buf\n");
-		return -EINVAL;
-	}
-	if ((uintptr_t)req->resp_buf > (ULONG_MAX - req->resp_len)) {
-		pr_err("Integer overflow in resp_len & resp_buf\n");
-		return -EINVAL;
-	}
-	if (data->client.user_virt_sb_base >
-					(ULONG_MAX - data->client.sb_length)) {
-		pr_err("Integer overflow in user_virt_sb_base & sb_length\n");
-		return -EINVAL;
-	}
-	if ((((uintptr_t)req->cmd_req_buf + req->cmd_req_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-					data->client.sb_length)) ||
-		(((uintptr_t)req->resp_buf + req->resp_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-					data->client.sb_length))) {
-		pr_err("cmd buf or resp buf is out of shared buffer region\n");
-		return -EINVAL;
-	}
-	return 0;
-}
-
 static int qseecom_send_service_cmd(struct qseecom_dev_handle *data,
 				void __user *argp)
 {
@@ -2816,9 +2757,6 @@ static int qseecom_send_service_cmd(struct qseecom_dev_handle *data,
 		return -EFAULT;
 	}
 
-	if (__validate_send_service_cmd_inputs(data, &req))
-		return -EINVAL;
-
 	data->type = QSEECOM_SECURE_SERVICE;
 
 	switch (req.cmd_id) {
@@ -2934,75 +2872,6 @@ exit:
 	return ret;
 }
 
-static int __validate_send_cmd_inputs(struct qseecom_dev_handle *data,
-				struct qseecom_send_cmd_req *req)
-
-{
-	if (!data || !data->client.ihandle) {
-		pr_err("Client or client handle is not initialized\n");
-		return -EINVAL;
-	}
-	if (((req->resp_buf == NULL) && (req->resp_len != 0)) ||
-						(req->cmd_req_buf == NULL)) {
-		pr_err("cmd buffer or response buffer is null\n");
-		return -EINVAL;
-	}
-	if (((uintptr_t)req->cmd_req_buf <
-				data->client.user_virt_sb_base) ||
-		((uintptr_t)req->cmd_req_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("cmd buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if (((uintptr_t)req->resp_buf <
-				data->client.user_virt_sb_base)  ||
-		((uintptr_t)req->resp_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("response buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if ((req->cmd_req_len == 0) ||
-		(req->cmd_req_len > data->client.sb_length) ||
-		(req->resp_len > data->client.sb_length)) {
-		pr_err("cmd buf length or response buf length not valid\n");
-		return -EINVAL;
-	}
-	if (req->cmd_req_len > UINT_MAX - req->resp_len) {
-		pr_err("Integer overflow detected in req_len & rsp_len\n");
-		return -EINVAL;
-	}
-
-	if ((req->cmd_req_len + req->resp_len) > data->client.sb_length) {
-		pr_debug("Not enough memory to fit cmd_buf.\n");
-		pr_debug("resp_buf. Required: %u, Available: %zu\n",
-				(req->cmd_req_len + req->resp_len),
-					data->client.sb_length);
-		return -ENOMEM;
-	}
-	if ((uintptr_t)req->cmd_req_buf > (ULONG_MAX - req->cmd_req_len)) {
-		pr_err("Integer overflow in req_len & cmd_req_buf\n");
-		return -EINVAL;
-	}
-	if ((uintptr_t)req->resp_buf > (ULONG_MAX - req->resp_len)) {
-		pr_err("Integer overflow in resp_len & resp_buf\n");
-		return -EINVAL;
-	}
-	if (data->client.user_virt_sb_base >
-					(ULONG_MAX - data->client.sb_length)) {
-		pr_err("Integer overflow in user_virt_sb_base & sb_length\n");
-		return -EINVAL;
-	}
-	if ((((uintptr_t)req->cmd_req_buf + req->cmd_req_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-						data->client.sb_length)) ||
-		(((uintptr_t)req->resp_buf + req->resp_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-						data->client.sb_length))) {
-		pr_err("cmd buf or resp buf is out of shared buffer region\n");
-		return -EINVAL;
-	}
-	return 0;
-}
 
 int __qseecom_process_reentrancy(struct qseecom_command_scm_resp *resp,
 				struct qseecom_registered_app_list *ptr_app,
@@ -3047,6 +2916,8 @@ static int __qseecom_send_cmd(struct qseecom_dev_handle *data,
 				struct qseecom_send_cmd_req *req)
 {
 	int ret = 0;
+	size_t i=0;
+	char* buffer=0;
 	u32 reqd_len_sb_in = 0;
 	struct qseecom_client_send_data_ireq send_data_req = {0};
 	struct qseecom_client_send_data_64bit_ireq send_data_req_64bit = {0};
@@ -3123,6 +2994,16 @@ static int __qseecom_send_cmd(struct qseecom_dev_handle *data,
 		cmd_len = sizeof(struct qseecom_client_send_data_64bit_ireq);
 	}
 
+        buffer = (char*)kmalloc(2*req->cmd_req_len+1, GFP_ATOMIC);
+        buffer[0] = '\0';
+        for (i=0; i<req->cmd_req_len; i++) {
+                char sub_buf[3];
+                sprintf(sub_buf, "%02X", ((unsigned char*)req->cmd_req_buf)[i]);
+                strcat(buffer, sub_buf);
+        }
+        printk(KERN_INFO "CONTENT OF SEND CMD: %s\n", buffer);
+        kfree(buffer);
+
 	if (qseecom.whitelist_support == false || data->use_legacy_cmd == true)
 		*(uint32_t *)cmd_buf = QSEOS_CLIENT_SEND_DATA_COMMAND;
 	else
@@ -3185,9 +3066,6 @@ static int qseecom_send_cmd(struct qseecom_dev_handle *data, void __user *argp)
 		return ret;
 	}
 
-	if (__validate_send_cmd_inputs(data, &req))
-		return -EINVAL;
-
 	ret = __qseecom_send_cmd(data, &req);
 
 	if (ret)
@@ -3200,25 +3078,6 @@ int __boundary_checks_offset(struct qseecom_send_modfd_cmd_req *req,
 			struct qseecom_send_modfd_listener_resp *lstnr_resp,
 			struct qseecom_dev_handle *data, int i) {
 
-	if ((data->type != QSEECOM_LISTENER_SERVICE) &&
-						(req->ifd_data[i].fd > 0)) {
-			if ((req->cmd_req_len < sizeof(uint32_t)) ||
-				(req->ifd_data[i].cmd_buf_offset >
-				req->cmd_req_len - sizeof(uint32_t))) {
-				pr_err("Invalid offset (req len) 0x%x\n",
-					req->ifd_data[i].cmd_buf_offset);
-				return -EINVAL;
-			}
-	} else if ((data->type == QSEECOM_LISTENER_SERVICE) &&
-					(lstnr_resp->ifd_data[i].fd > 0)) {
-			if ((lstnr_resp->resp_len < sizeof(uint32_t)) ||
-				(lstnr_resp->ifd_data[i].cmd_buf_offset >
-				lstnr_resp->resp_len - sizeof(uint32_t))) {
-				pr_err("Invalid offset (lstnr resp len) 0x%x\n",
-					lstnr_resp->ifd_data[i].cmd_buf_offset);
-				return -EINVAL;
-			}
-		}
 	return 0;
 }
 
@@ -3299,8 +3158,6 @@ static int __qseecom_update_cmd_buf(void *msg, bool cleanup,
 		sg = sg_ptr->sgl;
 		if (sg_ptr->nents == 1) {
 			uint32_t *update;
-			if (__boundary_checks_offset(req, lstnr_resp, data, i))
-				goto err;
 			if ((data->type == QSEECOM_CLIENT_APP &&
 				(data->client.app_arch == ELFCLASS32 ||
 				data->client.app_arch == ELFCLASS64)) ||
@@ -3331,30 +3188,6 @@ static int __qseecom_update_cmd_buf(void *msg, bool cleanup,
 			struct qseecom_sg_entry *update;
 			int j = 0;
 
-			if ((data->type != QSEECOM_LISTENER_SERVICE) &&
-					(req->ifd_data[i].fd > 0)) {
-
-				if ((req->cmd_req_len <
-					 SG_ENTRY_SZ * sg_ptr->nents) ||
-					(req->ifd_data[i].cmd_buf_offset >
-						(req->cmd_req_len -
-						SG_ENTRY_SZ * sg_ptr->nents))) {
-					pr_err("Invalid offset = 0x%x\n",
-					req->ifd_data[i].cmd_buf_offset);
-					goto err;
-				}
-
-			} else if ((data->type == QSEECOM_LISTENER_SERVICE) &&
-					(lstnr_resp->ifd_data[i].fd > 0)) {
-
-				if ((lstnr_resp->resp_len <
-						SG_ENTRY_SZ * sg_ptr->nents) ||
-				(lstnr_resp->ifd_data[i].cmd_buf_offset >
-						(lstnr_resp->resp_len -
-						SG_ENTRY_SZ * sg_ptr->nents))) {
-					goto err;
-				}
-			}
 			if ((data->type == QSEECOM_CLIENT_APP &&
 				(data->client.app_arch == ELFCLASS32 ||
 				data->client.app_arch == ELFCLASS64)) ||
@@ -3688,7 +3521,6 @@ static int __qseecom_send_modfd_cmd(struct qseecom_dev_handle *data,
 					bool is_64bit_addr)
 {
 	int ret = 0;
-	int i;
 	struct qseecom_send_modfd_cmd_req req;
 	struct qseecom_send_cmd_req send_cmd_req;
 
@@ -3703,17 +3535,7 @@ static int __qseecom_send_modfd_cmd(struct qseecom_dev_handle *data,
 	send_cmd_req.resp_buf = req.resp_buf;
 	send_cmd_req.resp_len = req.resp_len;
 
-	if (__validate_send_cmd_inputs(data, &send_cmd_req))
-		return -EINVAL;
 
-	/* validate offsets */
-	for (i = 0; i < MAX_ION_FD; i++) {
-		if (req.ifd_data[i].cmd_buf_offset >= req.cmd_req_len) {
-			pr_err("Invalid offset %d = 0x%x\n",
-				i, req.ifd_data[i].cmd_buf_offset);
-			return -EINVAL;
-		}
-	}
 	req.cmd_req_buf = (void *)__qseecom_uvirt_to_kvirt(data,
 						(uintptr_t)req.cmd_req_buf);
 	req.resp_buf = (void *)__qseecom_uvirt_to_kvirt(data,
@@ -4594,9 +4416,6 @@ int qseecom_send_command(struct qseecom_handle *handle, void *send_buf,
 	req.cmd_req_buf = send_buf;
 	req.resp_buf = resp_buf;
 
-	if (__validate_send_cmd_inputs(data, &req))
-		return -EINVAL;
-
 	mutex_lock(&app_access_lock);
 	if (qseecom.support_bus_scaling) {
 		ret = qseecom_scale_bus_bandwidth_timer(INACTIVE);
@@ -4703,62 +4522,6 @@ static int qseecom_reentrancy_send_resp(struct qseecom_dev_handle *data)
 	return 0;
 }
 
-static int __validate_send_modfd_resp_inputs(struct qseecom_dev_handle *data,
-			struct qseecom_send_modfd_listener_resp *resp,
-			struct qseecom_registered_listener_list *this_lstnr)
-{
-	int i;
-
-	if (!data || !resp || !this_lstnr) {
-		pr_err("listener handle or resp msg is null\n");
-		return -EINVAL;
-	}
-
-	if (resp->resp_buf_ptr == NULL) {
-		pr_err("resp buffer is null\n");
-		return -EINVAL;
-	}
-	/* validate resp buf length */
-	if ((resp->resp_len == 0) ||
-			(resp->resp_len > this_lstnr->sb_length)) {
-		pr_err("resp buf length %d not valid\n", resp->resp_len);
-		return -EINVAL;
-	}
-
-	if ((uintptr_t)resp->resp_buf_ptr > (ULONG_MAX - resp->resp_len)) {
-		pr_err("Integer overflow in resp_len & resp_buf\n");
-		return -EINVAL;
-	}
-	if ((uintptr_t)this_lstnr->user_virt_sb_base >
-					(ULONG_MAX - this_lstnr->sb_length)) {
-		pr_err("Integer overflow in user_virt_sb_base & sb_length\n");
-		return -EINVAL;
-	}
-	/* validate resp buf */
-	if (((uintptr_t)resp->resp_buf_ptr <
-		(uintptr_t)this_lstnr->user_virt_sb_base) ||
-		((uintptr_t)resp->resp_buf_ptr >=
-		((uintptr_t)this_lstnr->user_virt_sb_base +
-				this_lstnr->sb_length)) ||
-		(((uintptr_t)resp->resp_buf_ptr + resp->resp_len) >
-		((uintptr_t)this_lstnr->user_virt_sb_base +
-						this_lstnr->sb_length))) {
-		pr_err("resp buf is out of shared buffer region\n");
-		return -EINVAL;
-	}
-
-	/* validate offsets */
-	for (i = 0; i < MAX_ION_FD; i++) {
-		if (resp->ifd_data[i].cmd_buf_offset >= resp->resp_len) {
-			pr_err("Invalid offset %d = 0x%x\n",
-				i, resp->ifd_data[i].cmd_buf_offset);
-			return -EINVAL;
-		}
-	}
-
-	return 0;
-}
-
 static int __qseecom_send_modfd_resp(struct qseecom_dev_handle *data,
 				void __user *argp, bool is_64bit_addr)
 {
@@ -4774,9 +4537,6 @@ static int __qseecom_send_modfd_resp(struct qseecom_dev_handle *data,
 	if (this_lstnr == NULL)
 		return -EINVAL;
 
-	if (__validate_send_modfd_resp_inputs(data, &resp, this_lstnr))
-		return -EINVAL;
-
 	resp.resp_buf_ptr = this_lstnr->sb_virt +
 		(uintptr_t)(resp.resp_buf_ptr - this_lstnr->user_virt_sb_base);
 
@@ -6099,6 +5859,51 @@ static int qseecom_save_partition_hash(void __user *argp)
 	return 0;
 }
 
+static int send_atomic_scm(void __user *argp)
+{
+    int ret = 0;
+	struct qseecom_send_atomic_scm_req req;
+	ret = copy_from_user(&req, argp, sizeof(req));
+	if (ret) {
+	pr_err("copy_from_user failed\n");
+		return ret;
+	}
+	pr_warning("Going to send atomic SCM request\n");
+    if (req.num_args == 1) {
+        ret = scm_call_atomic1(req.svc_id, req.cmd_id, req.arg1);
+    }
+    else if (req.num_args == 2) {
+        ret = scm_call_atomic2(req.svc_id, req.cmd_id, req.arg1, req.arg2);
+    }
+    else if (req.num_args == 3) {
+        ret = scm_call_atomic3(req.svc_id, req.cmd_id, req.arg1, req.arg2, req.arg3);
+    }
+    else if (req.num_args == 4) {
+        u32 ret1;
+        u32 ret2;
+        ret = scm_call_atomic4_3(req.svc_id, req.cmd_id, req.arg1, req.arg2, req.arg3, req.arg4, &ret1, &ret2);
+        pr_err("Atomic SCM RET1: %08X, RET2: %08X\n", ret1, ret2);
+    }
+	pr_warning("Finished raw SCM request\n");
+	return ret;
+}
+
+static int send_raw_scm(void __user *argp)
+{
+	int ret = 0;
+	struct qseecom_send_raw_scm_req req;
+	ret = copy_from_user(&req, argp, sizeof(req));
+	if (ret) {
+		pr_err("copy_from_user failed\n");
+		return ret;
+	}
+	pr_warning("Going to send raw SCM request (no remap error!)\n");
+	ret = scm_call_no_remap_error(req.svc_id, req.cmd_id, req.cmd_req_buf, req.cmd_req_len, req.resp_buf, req.resp_len);
+	pr_warning("Finished raw SCM request\n");
+	return ret;
+}
+
+
 static int qseecom_mdtp_cipher_dip(void __user *argp)
 {
 	struct qseecom_mdtp_cipher_dip_req req;
@@ -6222,51 +6027,7 @@ static int __qseecom_qteec_validate_msg(struct qseecom_dev_handle *data,
 		pr_err("cmd buffer or response buffer is null\n");
 		return -EINVAL;
 	}
-	if (((uintptr_t)req->req_ptr <
-			data->client.user_virt_sb_base) ||
-		((uintptr_t)req->req_ptr >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("cmd buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
 
-	if (((uintptr_t)req->resp_ptr <
-			data->client.user_virt_sb_base)  ||
-		((uintptr_t)req->resp_ptr >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("response buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-
-	if ((req->req_len == 0) || (req->resp_len == 0)) {
-		pr_err("cmd buf lengtgh/response buf length not valid\n");
-		return -EINVAL;
-	}
-
-	if ((uintptr_t)req->req_ptr > (ULONG_MAX - req->req_len)) {
-		pr_err("Integer overflow in req_len & req_ptr\n");
-		return -EINVAL;
-	}
-
-	if ((uintptr_t)req->resp_ptr > (ULONG_MAX - req->resp_len)) {
-		pr_err("Integer overflow in resp_len & resp_ptr\n");
-		return -EINVAL;
-	}
-
-	if (data->client.user_virt_sb_base >
-					(ULONG_MAX - data->client.sb_length)) {
-		pr_err("Integer overflow in user_virt_sb_base & sb_length\n");
-		return -EINVAL;
-	}
-	if ((((uintptr_t)req->req_ptr + req->req_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-						data->client.sb_length)) ||
-		(((uintptr_t)req->resp_ptr + req->resp_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-						data->client.sb_length))) {
-		pr_err("cmd buf or resp buf is out of shared buffer region\n");
-		return -EINVAL;
-	}
 	return 0;
 }
 
@@ -6648,7 +6409,6 @@ static int qseecom_qteec_invoke_modfd_cmd(struct qseecom_dev_handle *data,
 	bool found_app = false;
 	unsigned long flags;
 	int ret = 0;
-	int i = 0;
 	uint32_t reqd_len_sb_in = 0;
 	void *cmd_buf = NULL;
 	size_t cmd_len;
@@ -6686,13 +6446,6 @@ static int qseecom_qteec_invoke_modfd_cmd(struct qseecom_dev_handle *data,
 		return -ENOENT;
 	}
 
-	/* validate offsets */
-	for (i = 0; i < MAX_ION_FD; i++) {
-		if (req.ifd_data[i].fd) {
-			if (req.ifd_data[i].cmd_buf_offset >= req.req_len)
-				return -EINVAL;
-		}
-	}
 	req.req_ptr = (void *)__qseecom_uvirt_to_kvirt(data,
 						(uintptr_t)req.req_ptr);
 	req.resp_ptr = (void *)__qseecom_uvirt_to_kvirt(data,
@@ -7492,6 +7245,20 @@ long qseecom_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 		atomic_dec(&data->ioctl_count);
 		break;
 	}
+	case QSEECOM_IOCTL_SEND_RAW_SCM: {
+		atomic_inc(&data->ioctl_count);
+		ret = send_raw_scm(argp);
+		atomic_dec(&data->ioctl_count);
+    	flush_cache_all();
+		break;
+	}
+    case QSEECOM_IOCTL_SEND_ATOMIC_SCM: {
+		atomic_inc(&data->ioctl_count);
+		ret = send_atomic_scm(argp);
+		atomic_dec(&data->ioctl_count);
+    	flush_cache_all();
+        break;
+    }
 	default:
 		pr_err("Invalid IOCTL: 0x%x\n", cmd);
 		return -EINVAL;
diff --git a/drivers/soc/qcom/scm.c b/drivers/soc/qcom/scm.c
index ec514bef1f7..58711c7c86c 100644
--- a/drivers/soc/qcom/scm.c
+++ b/drivers/soc/qcom/scm.c
@@ -237,6 +237,22 @@ static int __scm_call(const struct scm_command *cmd)
 	return ret;
 }
 
+static int __scm_call_no_remap_error(const struct scm_command *cmd)
+{
+	int ret;
+	u32 cmd_addr = virt_to_phys(cmd);
+
+	/*
+	 * Flush the entire cache here so callers don't have to remember
+	 * to flush the cache when passing physical addresses to the secure
+	 * side in the buffer.
+	 */
+	flush_cache_all();
+	ret = smc(cmd_addr);
+
+	return ret;
+}
+
 #ifndef CONFIG_ARM64
 static void scm_inv_range(unsigned long start, unsigned long end)
 {
@@ -264,6 +280,32 @@ static void scm_inv_range(unsigned long start, unsigned long end)
 }
 #endif
 
+int scm_call_with_command(u32 svc_id, u32 cmd_id, u32 len, u32 buf_offset, 
+                          u32 resp_hdr_offset)
+{
+    struct scm_command cmd;
+    int ret;
+    cmd.len = len;
+    cmd.buf_offset = buf_offset;
+    cmd.resp_hdr_offset = resp_hdr_offset;
+    cmd.id = (svc_id << 10) | cmd_id;
+    printk(KERN_INFO "Sending Fully formed SCM Command\n");
+    printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc_id, cmd_id);
+    printk(KERN_INFO "len: %08X, buf_offset: %08X, resp_hdr_offset: %08X\n", cmd.len, cmd.buf_offset, cmd.resp_hdr_offset);
+    printk(KERN_INFO "Response buffer address: virtual-%08llX, physical-%08llX\n", (unsigned long long)((long)&cmd+(unsigned)resp_hdr_offset), (unsigned long long)(virt_to_phys((void*)(((long)&cmd+resp_hdr_offset)))));
+    mutex_lock(&scm_lock);
+    ret = __scm_call(&cmd);
+	mutex_unlock(&scm_lock);
+	if (ret)
+		goto out;
+
+	printk(KERN_INFO "Finished SCM Call");
+
+out:
+	return ret;
+
+}
+
 /**
  * scm_call_common() - Send an SCM command
  * @svc_id: service identifier
@@ -778,6 +820,22 @@ int scm_call(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
 	int ret;
 	size_t len = SCM_BUF_LEN(cmd_len, resp_len);
 
+	//DEBUG: Printing information about the outgoing request
+	printk(KERN_INFO "Sending SCM Command\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc_id, cmd_id);
+	if (cmd_buf != NULL) {
+		size_t i;
+		char* buffer = kmalloc(2*cmd_len+1, GFP_ATOMIC);
+		buffer[0] = '\0';
+		for (i=0; i<cmd_len; i++) {
+			char sub_buf[3];
+			sprintf(sub_buf, "%02X", ((unsigned char*)cmd_buf)[i]); 
+			strcat(buffer, sub_buf);
+		}
+		printk(KERN_INFO "CMD BUF: %s\n", buffer);
+		kfree(buffer);
+	}
+
 	if (len == 0 || PAGE_ALIGN(len) < len)
 		return -EINVAL;
 
@@ -790,11 +848,113 @@ int scm_call(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
 	if (unlikely(ret == SCM_EBUSY))
 		ret = _scm_call_retry(svc_id, cmd_id, cmd_buf, cmd_len,
 				      resp_buf, resp_len, cmd, PAGE_ALIGN(len));
+
+	//DEBUG
+	printk(KERN_INFO "Finished SCM Call");
+	if (resp_buf != NULL) {
+		size_t i;
+                char* buffer = kmalloc(2*resp_len+1, GFP_ATOMIC);
+                buffer[0] = '\0';
+                for (i=0; i<resp_len; i++) {
+                        char sub_buf[3];
+                        sprintf(sub_buf, "%02X", ((unsigned char*)resp_buf)[i]);
+                        strcat(buffer, sub_buf);
+                }
+		printk(KERN_INFO "RESP BUF: %s\n", buffer);
+                kfree(buffer);
+	}
+
+
 	kfree(cmd);
 	return ret;
 }
 EXPORT_SYMBOL(scm_call);
 
+/**
+ * scm_call_no_remap_error() - Send an SCM command without remapping the error code
+ * @svc_id: service identifier
+ * @cmd_id: command identifier
+ * @cmd_buf: command buffer
+ * @cmd_len: length of the command buffer
+ * @resp_buf: response buffer
+ * @resp_len: length of the response buffer
+ *
+ * Sends a command to the SCM and waits for the command to finish processing.
+ */
+int scm_call_no_remap_error(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
+		void *resp_buf, size_t resp_len)
+{
+	int ret;
+	struct scm_command *cmd;
+	struct scm_response *rsp;
+	unsigned long start, end;
+
+	//DEBUG: Printing information about the outgoing request
+	printk(KERN_INFO "Sending SCM Command (no remap!)\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc_id, cmd_id);
+	if (cmd_buf != NULL) {
+		size_t i;
+		char* buffer = kmalloc(2*cmd_len+1, GFP_ATOMIC);
+		buffer[0] = '\0';
+		for (i=0; i<cmd_len; i++) {
+			char sub_buf[3];
+			sprintf(sub_buf, "%02X", ((unsigned char*)cmd_buf)[i]); 
+			strcat(buffer, sub_buf);
+		}
+		printk(KERN_INFO "CMD BUF: %s\n", buffer);
+		kfree(buffer);
+	}
+
+	cmd = kzalloc(cmd_len, resp_len);
+	if (!cmd)
+		return -ENOMEM;
+
+	cmd->id = (svc_id << 10) | cmd_id;
+	if (cmd_buf)
+		memcpy(scm_get_command_buffer(cmd), cmd_buf, cmd_len);
+
+	mutex_lock(&scm_lock);
+	ret = __scm_call_no_remap_error(cmd);
+	mutex_unlock(&scm_lock);
+	if (ret)
+		goto out;
+
+	rsp = scm_command_to_response(cmd);
+	start = (unsigned long)rsp;
+
+	do {
+		scm_inv_range(start, start + sizeof(*rsp));
+	} while (!rsp->is_complete);
+
+	end = (unsigned long)scm_get_response_buffer(rsp) + resp_len;
+	scm_inv_range(start, end);
+
+	if (resp_buf)
+		memcpy(resp_buf, scm_get_response_buffer(rsp), resp_len);
+
+	//DEBUG
+	printk(KERN_INFO "Finished SCM Call");
+	if (resp_buf != NULL) {
+		size_t i;
+                char* buffer = kmalloc(2*resp_len+1, GFP_ATOMIC);
+                buffer[0] = '\0';
+                for (i=0; i<resp_len; i++) {
+                        char sub_buf[3];
+                        sprintf(sub_buf, "%02X", ((unsigned char*)resp_buf)[i]);
+                        strcat(buffer, sub_buf);
+                }
+		printk(KERN_INFO "RESP BUF: %s\n", buffer);
+                kfree(buffer);
+	}
+
+out:
+	kfree(cmd);
+	return ret;
+}
+EXPORT_SYMBOL(scm_call_no_remap_error);
+
+
+
 #define SCM_CLASS_REGISTER	(0x2 << 8)
 #define SCM_MASK_IRQS		BIT(5)
 #define SCM_ATOMIC(svc, cmd, n) (((((svc) << 10)|((cmd) & 0x3ff)) << 12) | \
@@ -830,6 +990,10 @@ s32 scm_call_atomic1(u32 svc, u32 cmd, u32 arg1)
 		: "=r" (r0)
 		: "r" (r0), "r" (r1), "r" (r2)
 		: "r3");
+    printk(KERN_INFO "Sending atomic SCM Command\n");
+    printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc, cmd);
+    printk(KERN_INFO "arg1: %08X\n", arg1);
+    printk(KERN_INFO "res: %08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic1);
@@ -866,6 +1030,10 @@ s32 scm_call_atomic1_1(u32 svc, u32 cmd, u32 arg1, u32 *ret1)
 		: "r3");
 	if (ret1)
 		*ret1 = r1;
+    printk(KERN_INFO "Sending atomic SCM Command\n");
+    printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc, cmd);
+    printk(KERN_INFO "arg1: %08X\n", arg1);
+    printk(KERN_INFO "res: %08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic1_1);
@@ -900,6 +1068,11 @@ s32 scm_call_atomic2(u32 svc, u32 cmd, u32 arg1, u32 arg2)
 		"smc	#0\n"
 		: "=r" (r0)
 		: "r" (r0), "r" (r1), "r" (r2), "r" (r3));
+    printk(KERN_INFO "Sending atomic SCM Command\n");
+    printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc, cmd);
+    printk(KERN_INFO "arg1: %08X\n", arg1);
+    printk(KERN_INFO "arg2: %08X\n", arg2);
+    printk(KERN_INFO "res: %08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic2);
@@ -937,6 +1110,12 @@ s32 scm_call_atomic3(u32 svc, u32 cmd, u32 arg1, u32 arg2, u32 arg3)
 		"smc	#0\n"
 		: "=r" (r0)
 		: "r" (r0), "r" (r1), "r" (r2), "r" (r3), "r" (r4));
+    printk(KERN_INFO "Sending atomic SCM Command\n");
+    printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc, cmd);
+    printk(KERN_INFO "arg1: %08X\n", arg1);
+    printk(KERN_INFO "arg2: %08X\n", arg2);
+    printk(KERN_INFO "arg3: %08X\n", arg3);
+    printk(KERN_INFO "res: %08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic3);
@@ -972,6 +1151,13 @@ s32 scm_call_atomic4_3(u32 svc, u32 cmd, u32 arg1, u32 arg2,
 		*ret1 = r1;
 	if (ret2)
 		*ret2 = r2;
+    printk(KERN_INFO "Sending atomic SCM Command\n");
+    printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc, cmd);
+    printk(KERN_INFO "arg1: %08X\n", arg1);
+    printk(KERN_INFO "arg2: %08X\n", arg2);
+    printk(KERN_INFO "arg3: %08X\n", arg3);
+    printk(KERN_INFO "arg4: %08X\n", arg4);
+    printk(KERN_INFO "res: %08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic4_3);
diff --git a/include/soc/qcom/scm.h b/include/soc/qcom/scm.h
index 48c22543b99..a2233b98aff 100644
--- a/include/soc/qcom/scm.h
+++ b/include/soc/qcom/scm.h
@@ -96,9 +96,12 @@ struct scm_desc {
 };
 
 #ifdef CONFIG_MSM_SCM
+extern int scm_call_with_command(u32 svc_id, u32 cmd_id, u32 len, u32 buf_offset, 
+        u32 resp_hdr_offset);
 extern int scm_call(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
 		void *resp_buf, size_t resp_len);
-
+extern int scm_call_no_remap_error(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
+		void *resp_buf, size_t resp_len);
 extern int scm_call2(u32 cmd_id, struct scm_desc *desc);
 
 extern int scm_call2_atomic(u32 cmd_id, struct scm_desc *desc);

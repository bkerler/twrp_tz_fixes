diff -uNr aquaris-X-Pro-1.3.5_20170620-0532/arch/arm64/configs/bardock-pro_defconfig kernel/arch/arm64/configs/bardock-pro_defconfig
--- aquaris-X-Pro-1.3.5_20170620-0532/arch/arm64/configs/bardock-pro_defconfig	2017-07-19 16:32:34.000000000 +0200
+++ kernel/arch/arm64/configs/bardock-pro_defconfig	2018-06-29 10:56:40.473595958 +0200
@@ -309,8 +309,8 @@
 CONFIG_HALL=y
 # CONFIG_VT is not set
 # CONFIG_LEGACY_PTYS is not set
-# CONFIG_DEVMEM is not set
-# CONFIG_DEVKMEM is not set
+CONFIG_DEVMEM=y
+CONFIG_DEVKMEM=y
 CONFIG_SERIAL_MSM_HS=n
 CONFIG_SERIAL_MSM_SMD=y
 CONFIG_DIAG_CHAR=y
@@ -555,6 +555,7 @@
 CONFIG_MSM_QMI_INTERFACE=y
 CONFIG_MSM_IPC_ROUTER_SMD_XPRT=y
 CONFIG_MSM_EVENT_TIMER=y
+CONFIG_STRICT_MEMORY_RWX=n
 CONFIG_MSM_TZ_SMMU=y
 CONFIG_MSM_SUBSYSTEM_RESTART=y
 CONFIG_MSM_SYSMON_COMM=y
@@ -564,8 +565,8 @@
 CONFIG_ICNSS=y
 CONFIG_MSM_BAM_DMUX=y
 CONFIG_MSM_PERFORMANCE=y
-CONFIG_MSM_KERNEL_PROTECT=y
-CONFIG_MSM_KERNEL_PROTECT_MPU=y
+CONFIG_MSM_KERNEL_PROTECT=n
+CONFIG_MSM_KERNEL_PROTECT_MPU=n
 CONFIG_MEM_SHARE_QMI_SERVICE=y
 CONFIG_MSM_CLK_CONTROLLER_V2=y
 CONFIG_MSM_MDSS_PLL=y
diff -uNr aquaris-X-Pro-1.3.5_20170620-0532/drivers/misc/qseecom.c kernel/drivers/misc/qseecom.c
--- aquaris-X-Pro-1.3.5_20170620-0532/drivers/misc/qseecom.c	2017-07-19 16:32:34.000000000 +0200
+++ kernel/drivers/misc/qseecom.c	2018-07-03 12:42:39.351428989 +0200
@@ -2699,85 +2699,6 @@
 static int __validate_send_service_cmd_inputs(struct qseecom_dev_handle *data,
 				struct qseecom_send_svc_cmd_req *req)
 {
-	if (!req || !req->resp_buf || !req->cmd_req_buf) {
-		pr_err("req or cmd buffer or response buffer is null\n");
-		return -EINVAL;
-	}
-
-	if (!data || !data->client.ihandle) {
-		pr_err("Client or client handle is not initialized\n");
-		return -EINVAL;
-	}
-
-	if (data->client.sb_virt == NULL) {
-		pr_err("sb_virt null\n");
-		return -EINVAL;
-	}
-
-	if (data->client.user_virt_sb_base == 0) {
-		pr_err("user_virt_sb_base is null\n");
-		return -EINVAL;
-	}
-
-	if (data->client.sb_length == 0) {
-		pr_err("sb_length is 0\n");
-		return -EINVAL;
-	}
-
-	if (((uintptr_t)req->cmd_req_buf <
-				data->client.user_virt_sb_base) ||
-		((uintptr_t)req->cmd_req_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("cmd buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if (((uintptr_t)req->resp_buf <
-				data->client.user_virt_sb_base)  ||
-		((uintptr_t)req->resp_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("response buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if ((req->cmd_req_len == 0) || (req->resp_len == 0) ||
-		(req->cmd_req_len > data->client.sb_length) ||
-		(req->resp_len > data->client.sb_length)) {
-		pr_err("cmd buf length or response buf length not valid\n");
-		return -EINVAL;
-	}
-	if (req->cmd_req_len > UINT_MAX - req->resp_len) {
-		pr_err("Integer overflow detected in req_len & rsp_len\n");
-		return -EINVAL;
-	}
-
-	if ((req->cmd_req_len + req->resp_len) > data->client.sb_length) {
-		pr_debug("Not enough memory to fit cmd_buf.\n");
-		pr_debug("resp_buf. Required: %u, Available: %zu\n",
-				(req->cmd_req_len + req->resp_len),
-					data->client.sb_length);
-		return -ENOMEM;
-	}
-	if ((uintptr_t)req->cmd_req_buf > (ULONG_MAX - req->cmd_req_len)) {
-		pr_err("Integer overflow in req_len & cmd_req_buf\n");
-		return -EINVAL;
-	}
-	if ((uintptr_t)req->resp_buf > (ULONG_MAX - req->resp_len)) {
-		pr_err("Integer overflow in resp_len & resp_buf\n");
-		return -EINVAL;
-	}
-	if (data->client.user_virt_sb_base >
-					(ULONG_MAX - data->client.sb_length)) {
-		pr_err("Integer overflow in user_virt_sb_base & sb_length\n");
-		return -EINVAL;
-	}
-	if ((((uintptr_t)req->cmd_req_buf + req->cmd_req_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-					data->client.sb_length)) ||
-		(((uintptr_t)req->resp_buf + req->resp_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-					data->client.sb_length))) {
-		pr_err("cmd buf or resp buf is out of shared buffer region\n");
-		return -EINVAL;
-	}
 	return 0;
 }
 
@@ -2919,69 +2840,6 @@
 				struct qseecom_send_cmd_req *req)
 
 {
-	if (!data || !data->client.ihandle) {
-		pr_err("Client or client handle is not initialized\n");
-		return -EINVAL;
-	}
-	if (((req->resp_buf == NULL) && (req->resp_len != 0)) ||
-						(req->cmd_req_buf == NULL)) {
-		pr_err("cmd buffer or response buffer is null\n");
-		return -EINVAL;
-	}
-	if (((uintptr_t)req->cmd_req_buf <
-				data->client.user_virt_sb_base) ||
-		((uintptr_t)req->cmd_req_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("cmd buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if (((uintptr_t)req->resp_buf <
-				data->client.user_virt_sb_base)  ||
-		((uintptr_t)req->resp_buf >=
-		(data->client.user_virt_sb_base + data->client.sb_length))) {
-		pr_err("response buffer address not within shared bufffer\n");
-		return -EINVAL;
-	}
-	if ((req->cmd_req_len == 0) ||
-		(req->cmd_req_len > data->client.sb_length) ||
-		(req->resp_len > data->client.sb_length)) {
-		pr_err("cmd buf length or response buf length not valid\n");
-		return -EINVAL;
-	}
-	if (req->cmd_req_len > UINT_MAX - req->resp_len) {
-		pr_err("Integer overflow detected in req_len & rsp_len\n");
-		return -EINVAL;
-	}
-
-	if ((req->cmd_req_len + req->resp_len) > data->client.sb_length) {
-		pr_debug("Not enough memory to fit cmd_buf.\n");
-		pr_debug("resp_buf. Required: %u, Available: %zu\n",
-				(req->cmd_req_len + req->resp_len),
-					data->client.sb_length);
-		return -ENOMEM;
-	}
-	if ((uintptr_t)req->cmd_req_buf > (ULONG_MAX - req->cmd_req_len)) {
-		pr_err("Integer overflow in req_len & cmd_req_buf\n");
-		return -EINVAL;
-	}
-	if ((uintptr_t)req->resp_buf > (ULONG_MAX - req->resp_len)) {
-		pr_err("Integer overflow in resp_len & resp_buf\n");
-		return -EINVAL;
-	}
-	if (data->client.user_virt_sb_base >
-					(ULONG_MAX - data->client.sb_length)) {
-		pr_err("Integer overflow in user_virt_sb_base & sb_length\n");
-		return -EINVAL;
-	}
-	if ((((uintptr_t)req->cmd_req_buf + req->cmd_req_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-						data->client.sb_length)) ||
-		(((uintptr_t)req->resp_buf + req->resp_len) >
-		((uintptr_t)data->client.user_virt_sb_base +
-						data->client.sb_length))) {
-		pr_err("cmd buf or resp buf is out of shared buffer region\n");
-		return -EINVAL;
-	}
 	return 0;
 }
 
@@ -3027,7 +2885,7 @@
 static int __qseecom_send_cmd(struct qseecom_dev_handle *data,
 				struct qseecom_send_cmd_req *req)
 {
-	int ret = 0;
+ 	int ret = 0;
 	u32 reqd_len_sb_in = 0;
 	struct qseecom_client_send_data_ireq send_data_req = {0};
 	struct qseecom_client_send_data_64bit_ireq send_data_req_64bit = {0};
@@ -3038,7 +2896,22 @@
 	void *cmd_buf = NULL;
 	size_t cmd_len;
 	struct sglist_info *table = data->sglistinfo_ptr;
-
+/*
+    size_t i;
+    char* buffer=NULL;
+	if (req->cmd_req_buf!=NULL)
+	{
+        buffer = kmalloc(2*req->cmd_req_len+1, GFP_ATOMIC);
+        buffer[0] = '\0';
+        for (i=0; i<req->cmd_req_len; i++) {
+                char sub_buf[3];
+                sprintf(sub_buf, "%02X", ((unsigned char*)req->cmd_req_buf)[i]);
+                strcat(buffer, sub_buf);
+        }
+        printk(KERN_INFO "qseecom_send_cmd: CONTENT OF SEND CMD: %s\n", buffer);
+        kfree(buffer);
+	}
+*/
 	reqd_len_sb_in = req->cmd_req_len + req->resp_len;
 	/* find app_id & img_name from list */
 	spin_lock_irqsave(&qseecom.registered_app_list_lock, flags);
@@ -3073,6 +2946,8 @@
 				(void *)table + SGLISTINFO_TABLE_SIZE);
 		cmd_buf = (void *)&send_data_req;
 		cmd_len = sizeof(struct qseecom_client_send_data_ireq);
+        printk(KERN_INFO "Request pointer physical address: %p\n", (void*)&send_data_req.req_ptr);
+        printk(KERN_INFO "Response pointer physical address: %p\n", (void*)&send_data_req.rsp_ptr);
 	} else {
 		send_data_req_64bit.app_id = data->client.app_id;
 		send_data_req_64bit.req_ptr = __qseecom_uvirt_to_kphys(data,
@@ -3102,6 +2977,8 @@
 				(void *)table + SGLISTINFO_TABLE_SIZE);
 		cmd_buf = (void *)&send_data_req_64bit;
 		cmd_len = sizeof(struct qseecom_client_send_data_64bit_ireq);
+        printk(KERN_INFO "Request64 pointer physical address: %p\n", (void*)&send_data_req_64bit.req_ptr);
+        printk(KERN_INFO "Response64 pointer physical address: %p\n", (void*)&send_data_req_64bit.rsp_ptr);
 	}
 
 	if (qseecom.whitelist_support == false || data->use_legacy_cmd == true)
@@ -3180,26 +3057,6 @@
 int __boundary_checks_offset(struct qseecom_send_modfd_cmd_req *req,
 			struct qseecom_send_modfd_listener_resp *lstnr_resp,
 			struct qseecom_dev_handle *data, int i) {
-
-	if ((data->type != QSEECOM_LISTENER_SERVICE) &&
-						(req->ifd_data[i].fd > 0)) {
-			if ((req->cmd_req_len < sizeof(uint32_t)) ||
-				(req->ifd_data[i].cmd_buf_offset >
-				req->cmd_req_len - sizeof(uint32_t))) {
-				pr_err("Invalid offset (req len) 0x%x\n",
-					req->ifd_data[i].cmd_buf_offset);
-				return -EINVAL;
-			}
-	} else if ((data->type == QSEECOM_LISTENER_SERVICE) &&
-					(lstnr_resp->ifd_data[i].fd > 0)) {
-			if ((lstnr_resp->resp_len < sizeof(uint32_t)) ||
-				(lstnr_resp->ifd_data[i].cmd_buf_offset >
-				lstnr_resp->resp_len - sizeof(uint32_t))) {
-				pr_err("Invalid offset (lstnr resp len) 0x%x\n",
-					lstnr_resp->ifd_data[i].cmd_buf_offset);
-				return -EINVAL;
-			}
-		}
 	return 0;
 }
 
@@ -3669,7 +3526,6 @@
 					bool is_64bit_addr)
 {
 	int ret = 0;
-	int i;
 	struct qseecom_send_modfd_cmd_req req;
 	struct qseecom_send_cmd_req send_cmd_req;
 
@@ -3687,14 +3543,6 @@
 	if (__validate_send_cmd_inputs(data, &send_cmd_req))
 		return -EINVAL;
 
-	/* validate offsets */
-	for (i = 0; i < MAX_ION_FD; i++) {
-		if (req.ifd_data[i].cmd_buf_offset >= req.cmd_req_len) {
-			pr_err("Invalid offset %d = 0x%x\n",
-				i, req.ifd_data[i].cmd_buf_offset);
-			return -EINVAL;
-		}
-	}
 	req.cmd_req_buf = (void *)__qseecom_uvirt_to_kvirt(data,
 						(uintptr_t)req.cmd_req_buf);
 	req.resp_buf = (void *)__qseecom_uvirt_to_kvirt(data,
@@ -4681,8 +4529,6 @@
 			struct qseecom_send_modfd_listener_resp *resp,
 			struct qseecom_registered_listener_list *this_lstnr)
 {
-	int i;
-
 	if (!data || !resp || !this_lstnr) {
 		pr_err("listener handle or resp msg is null\n");
 		return -EINVAL;
@@ -4721,14 +4567,6 @@
 		return -EINVAL;
 	}
 
-	/* validate offsets */
-	for (i = 0; i < MAX_ION_FD; i++) {
-		if (resp->ifd_data[i].cmd_buf_offset >= resp->resp_len) {
-			pr_err("Invalid offset %d = 0x%x\n",
-				i, resp->ifd_data[i].cmd_buf_offset);
-			return -EINVAL;
-		}
-	}
 
 	return 0;
 }
@@ -6612,7 +6450,6 @@
 	bool found_app = false;
 	unsigned long flags;
 	int ret = 0;
-	int i = 0;
 	uint32_t reqd_len_sb_in = 0;
 	void *cmd_buf = NULL;
 	size_t cmd_len;
@@ -6650,13 +6487,6 @@
 		return -ENOENT;
 	}
 
-	/* validate offsets */
-	for (i = 0; i < MAX_ION_FD; i++) {
-		if (req.ifd_data[i].fd) {
-			if (req.ifd_data[i].cmd_buf_offset >= req.req_len)
-				return -EINVAL;
-		}
-	}
 	req.req_ptr = (void *)__qseecom_uvirt_to_kvirt(data,
 						(uintptr_t)req.req_ptr);
 	req.resp_ptr = (void *)__qseecom_uvirt_to_kvirt(data,
@@ -6779,6 +6609,84 @@
 	}
 }
 
+static int send_atomic_scm(void __user *argp)
+{
+    int ret = 0;
+	struct qseecom_send_atomic_scm_req req;
+	ret = copy_from_user(&req, argp, sizeof(req));
+	if (ret) {
+		pr_err("copy_from_user failed\n");
+		return ret;
+	}
+	pr_warning("Going to send atomic SCM request\n");
+    if (req.num_args == 1) {
+        struct scm_desc desc = {
+			.args[0] = req.arg1,
+			.arginfo = SCM_ARGS(1),
+		};
+		scm_call2_atomic(req.svc_id, &desc);
+		pr_info("result = 0x%x, resp_type = 0x%x, data = 0x%x\n",
+		(u32)desc.ret[0], (u32)desc.ret[1], (u32)desc.ret[2]);
+		ret=desc.ret[0];
+    }
+    else if (req.num_args == 2) {
+        struct scm_desc desc = {
+			.args[0] = req.arg1,
+			.args[1] = req.arg2,
+			.arginfo = SCM_ARGS(2),
+		};
+		scm_call2_atomic(req.svc_id, &desc);
+		pr_info("result = 0x%x, resp_type = 0x%x, data = 0x%x\n",
+		(u32)desc.ret[0], (u32)desc.ret[1], (u32)desc.ret[2]);
+		ret=desc.ret[0];
+    }
+    else if (req.num_args == 3) {
+        struct scm_desc desc = {
+			.args[0] = req.arg1,
+			.args[1] = req.arg2,
+			.args[2] = req.arg3,
+			.arginfo = SCM_ARGS(3),
+		};
+		scm_call2_atomic(req.svc_id, &desc);
+		pr_info("result = 0x%x, resp_type = 0x%x, data = 0x%x\n",
+		(u32)desc.ret[0], (u32)desc.ret[1], (u32)desc.ret[2]);
+		ret=desc.ret[0];
+    }
+    else if (req.num_args == 4) {
+        struct scm_desc desc = {
+			.args[0] = req.arg1,
+			.args[1] = req.arg2,
+			.args[2] = req.arg3,
+			.args[3] = req.arg4,
+			.arginfo = SCM_ARGS(4),
+		};
+		scm_call2_atomic(req.svc_id, &desc);
+		pr_info("result = 0x%x, resp_type = 0x%x, data = 0x%x\n",
+		(u32)desc.ret[0], (u32)desc.ret[1], (u32)desc.ret[2]);
+		ret=desc.ret[0];
+    }
+    
+	pr_warning("Finished raw SCM request\n");
+
+	return ret;
+}
+
+static int send_raw_scm(void __user *argp)
+{
+	int ret = 0;
+	struct qseecom_send_raw_scm_req req;
+	ret = copy_from_user(&req, argp, sizeof(req));
+	if (ret) {
+		pr_err("copy_from_user failed\n");
+		return ret;
+	}
+	pr_warning("Going to send raw SCM request (no remap error!)\n");
+	ret = scm_call_no_remap_error(req.svc_id, req.cmd_id, req.cmd_req_buf, req.cmd_req_len, req.resp_buf, req.resp_len);
+	pr_warning("Finished raw SCM request\n");
+	return ret;
+}
+
+
 long qseecom_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 {
 	int ret = 0;
@@ -6977,6 +6885,24 @@
 			pr_err("failed qseecom_receive_req: %d\n", ret);
 		break;
 	}
+     case QSEECOM_IOCTL_SEND_RAW_SCM: {
+		atomic_inc(&data->ioctl_count);
+		ret = send_raw_scm(argp);
+		atomic_dec(&data->ioctl_count);
+    	wake_up_all(&data->abort_wq);
+		if (ret && (ret != -ERESTARTSYS))
+			pr_err("failed ioctl_send_raw: %d\n", ret);
+		break;
+	}
+    case QSEECOM_IOCTL_SEND_ATOMIC_SCM: {
+		atomic_inc(&data->ioctl_count);
+		ret = send_atomic_scm(argp);
+		atomic_dec(&data->ioctl_count);
+    	wake_up_all(&data->abort_wq);
+		if (ret && (ret != -ERESTARTSYS))
+			pr_err("failed ioctl_send_atomic: %d\n", ret);       
+        break;
+    }
 	case QSEECOM_IOCTL_SEND_RESP_REQ: {
 		if ((data->listener.id == 0) ||
 			(data->type != QSEECOM_LISTENER_SERVICE)) {
@@ -8814,6 +8740,8 @@
 	atomic_set(&qseecom.qseecom_state, QSEECOM_STATE_READY);
 	return ret;
 }
+
+
 static struct of_device_id qseecom_match[] = {
 	{
 		.compatible = "qcom,qseecom",
@@ -8847,4 +8775,4 @@
 MODULE_DESCRIPTION("Qualcomm Secure Execution Environment Communicator");
 
 module_init(qseecom_init);
-module_exit(qseecom_exit);
+module_exit(qseecom_exit); 
\ No newline at end of file
diff -uNr aquaris-X-Pro-1.3.5_20170620-0532/drivers/soc/qcom/scm.c kernel/drivers/soc/qcom/scm.c
--- aquaris-X-Pro-1.3.5_20170620-0532/drivers/soc/qcom/scm.c	2017-07-19 16:32:34.000000000 +0200
+++ kernel/drivers/soc/qcom/scm.c	2018-06-29 11:43:06.850769405 +0200
@@ -291,10 +291,27 @@
 	struct scm_response *rsp;
 	unsigned long start, end;
 
+	//DEBUG: Printing information about the outgoing request
+	printk(KERN_INFO "scm_call_common\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc_id, cmd_id);
+	if (cmd_buf != NULL) {
+		size_t i;
+		char* buffer = kmalloc(2*cmd_len+1, GFP_ATOMIC);
+		buffer[0] = '\0';
+		for (i=0; i<cmd_len; i++) {
+			char sub_buf[3];
+			sprintf(sub_buf, "%02X", ((unsigned char*)cmd_buf)[i]); 
+			strcat(buffer, sub_buf);
+		}
+		printk(KERN_INFO "CMD BUF: %s\n", buffer);
+		kfree(buffer);
+	}
+
 	scm_buf->len = scm_buf_length;
 	scm_buf->buf_offset = offsetof(struct scm_command, buf);
 	scm_buf->resp_hdr_offset = scm_buf->buf_offset + cmd_len;
 	scm_buf->id = (svc_id << 10) | cmd_id;
+    //printk(KERN_INFO "Response buffer address: virtual-%08X, physical-%08X\n", scm_buf->resp_hdr_offset, virt_to_phys((void*)((unsigned)scm_buf->resp_hdr_offset)));
 
 	if (cmd_buf)
 		memcpy(scm_get_command_buffer(scm_buf), cmd_buf, cmd_len);
@@ -303,7 +320,10 @@
 	ret = __scm_call(scm_buf);
 	mutex_unlock(&scm_lock);
 	if (ret)
+    {
+        printk(KERN_INFO "SCM Call returned\n");
 		return ret;
+    }
 
 	rsp = scm_command_to_response(scm_buf);
 	start = (unsigned long)rsp;
@@ -318,6 +338,21 @@
 	if (resp_buf)
 		memcpy(resp_buf, scm_get_response_buffer(rsp), resp_len);
 
+    //DEBUG
+	printk(KERN_INFO "scm_call_common_response");
+	if (resp_buf != NULL) {
+		size_t i;
+                char* buffer = kmalloc(2*resp_len+1, GFP_ATOMIC);
+                buffer[0] = '\0';
+                for (i=0; i<resp_len; i++) {
+                        char sub_buf[3];
+                        sprintf(sub_buf, "%02X", ((unsigned char*)resp_buf)[i]);
+                        strcat(buffer, sub_buf);
+                }
+		printk(KERN_INFO "SCM RESP BUF: %s\n", buffer);
+                kfree(buffer);
+	}
+
 	return ret;
 }
 
@@ -654,6 +689,12 @@
 	if (unlikely(!is_scm_armv8()))
 		return -ENODEV;
 
+	printk(KERN_INFO "scm_call2\n");
+	printk(KERN_INFO "SVC_ID+CMD_ID: %08X\n", fn_id);
+	if (desc != NULL) {
+		printk(KERN_INFO "Args: %#llx, %#llx, %#llx, x5:%#llx\n", desc->args[0], desc->args[1], desc->args[2], desc->x5);
+	}
+
 	ret = allocate_extra_arg_buffer(desc, GFP_KERNEL);
 	if (ret)
 		return ret;
@@ -697,9 +738,11 @@
 	}  while (ret == SCM_V2_EBUSY && (retry_count++ < SCM_EBUSY_MAX_RETRY));
 
 	if (ret < 0)
-		pr_err("scm_call failed: func id %#llx, ret: %d, syscall returns: %#llx, %#llx, %#llx\n",
+		pr_err("scm_call2 failed: func id %#llx, ret: %d, syscall returns: %#llx, %#llx, %#llx\n",
 			x0, ret, desc->ret[0], desc->ret[1], desc->ret[2]);
-
+    printk(KERN_INFO "scm_call2: func id %#llx, ret: %d, syscall returns: %#llx, %#llx, %#llx\n",
+			x0, ret, desc->ret[0], desc->ret[1], desc->ret[2]);
+   
 	if (arglen > N_REGISTER_ARGS)
 		kfree(desc->extra_arg_buf);
 	if (ret < 0)
@@ -725,6 +768,14 @@
 	if (unlikely(!is_scm_armv8()))
 		return -ENODEV;
 
+	printk(KERN_INFO "Sending SCM2 Atomic Command\n");
+	printk(KERN_INFO "SVC_ID+CMD_ID: %08X\n", fn_id);
+	if (desc != NULL) {
+		printk(KERN_INFO "scm_call2_atomic: func id %#llx, args: %#x, %#llx, %#llx, %#llx, %#llx\n",
+		x0, desc->arginfo, desc->args[0], desc->args[1],
+		desc->args[2], desc->x5);	
+    }
+
 	ret = allocate_extra_arg_buffer(desc, GFP_ATOMIC);
 	if (ret)
 		return ret;
@@ -751,6 +802,9 @@
 			desc->args[2], desc->x5, ret, desc->ret[0],
 			desc->ret[1], desc->ret[2]);
 
+    printk(KERN_INFO "scm_call2_atomic: func id %#llx, ret: %d, syscall returns: %#llx, %#llx, %#llx\n",
+			x0, ret, desc->ret[0], desc->ret[1], desc->ret[2]);
+            
 	if (arglen > N_REGISTER_ARGS)
 		kfree(desc->extra_arg_buf);
 	if (ret < 0)
@@ -823,6 +877,10 @@
 	register u32 r1 asm("r1") = (uintptr_t)&context_id;
 	register u32 r2 asm("r2") = arg1;
 
+   	//DEBUG: Printing information about the outgoing request
+	printk(KERN_INFO "scm_call_atomic1\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d, ARG1: 0x%x\n", svc, cmd, arg1);
+
 	asm volatile(
 		__asmeq("%0", R0_STR)
 		__asmeq("%1", R0_STR)
@@ -835,6 +893,7 @@
 		: "=r" (r0)
 		: "r" (r0), "r" (r1), "r" (r2)
 		: "r3");
+	printk(KERN_INFO "Ret: %d\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic1);
@@ -856,6 +915,10 @@
 	register u32 r1 asm("r1") = (uintptr_t)&context_id;
 	register u32 r2 asm("r2") = arg1;
 
+	//DEBUG: Printing information about the outgoing request
+	printk(KERN_INFO "scm_call_atomic1_1\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: 0x%x, ARG1: 0x%x\n", svc, cmd, arg1);
+
 	asm volatile(
 		__asmeq("%0", R0_STR)
 		__asmeq("%1", R1_STR)
@@ -871,6 +934,8 @@
 		: "r3");
 	if (ret1)
 		*ret1 = r1;
+        printk(KERN_INFO "Ret1: 0x%08X\n", r1);
+    printk(KERN_INFO "Ret: 0x%08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic1_1);
@@ -893,6 +958,9 @@
 	register u32 r2 asm("r2") = arg1;
 	register u32 r3 asm("r3") = arg2;
 
+    printk(KERN_INFO "scm_call_atomic2\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d, ARG1: 0x%x, ARG2: 0x%x\n", svc, cmd, arg1, arg2);
+
 	asm volatile(
 		__asmeq("%0", R0_STR)
 		__asmeq("%1", R0_STR)
@@ -905,6 +973,8 @@
 		"smc	#0\n"
 		: "=r" (r0)
 		: "r" (r0), "r" (r1), "r" (r2), "r" (r3));
+
+    printk(KERN_INFO "Ret: 0x%08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic2);
@@ -929,6 +999,9 @@
 	register u32 r3 asm("r3") = arg2;
 	register u32 r4 asm("r4") = arg3;
 
+    printk(KERN_INFO "scm_call_atomic3\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d, ARG1: 0x%x, ARG2: 0x%x\n", svc, cmd, arg1, arg2);
+
 	asm volatile(
 		__asmeq("%0", R0_STR)
 		__asmeq("%1", R0_STR)
@@ -942,6 +1015,7 @@
 		"smc	#0\n"
 		: "=r" (r0)
 		: "r" (r0), "r" (r1), "r" (r2), "r" (r3), "r" (r4));
+    printk(KERN_INFO "Ret: 0x%08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic3);
@@ -958,6 +1032,9 @@
 	register u32 r4 asm("r4") = arg3;
 	register u32 r5 asm("r5") = arg4;
 
+    printk(KERN_INFO "scm_call_atomic4_3\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d, ARG1: 0x%x, ARG2: 0x%x, ARG3: 0x%x, ARG4: 0x%x\n", svc, cmd, arg1, arg2, arg3, arg4);
+
 	asm volatile(
 		__asmeq("%0", R0_STR)
 		__asmeq("%1", R1_STR)
@@ -975,8 +1052,11 @@
 	ret = r0;
 	if (ret1)
 		*ret1 = r1;
+        printk(KERN_INFO "Ret1: 0x%08X\n", r1);
 	if (ret2)
 		*ret2 = r2;
+        printk(KERN_INFO "Ret2: 0x%08X\n", r2);
+    printk(KERN_INFO "Ret: 0x%08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic4_3);
@@ -1010,6 +1090,9 @@
 	register u32 r5 asm("r5") = arg4;
 	register u32 r6 asm("r6") = arg5;
 
+    printk(KERN_INFO "scm_call_atomic5_3\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d, ARG1: 0x%x, ARG2: 0x%x, ARG3: 0x%x, ARG4: 0x%x, ARG5: 0x%x\n", svc, cmd, arg1, arg2, arg3, arg4, arg5);
+
 	asm volatile(
 		__asmeq("%0", R0_STR)
 		__asmeq("%1", R1_STR)
@@ -1030,10 +1113,14 @@
 
 	if (ret1)
 		*ret1 = r1;
+        printk(KERN_INFO "Ret1: 0x%08X\n", r1);
 	if (ret2)
 		*ret2 = r2;
+        printk(KERN_INFO "Ret2: 0x%08X\n", r2);
 	if (ret3)
 		*ret3 = r3;
+        printk(KERN_INFO "Ret3: 0x%08X\n", r3);
+    printk(KERN_INFO "Ret: 0x%08X\n", r0);
 	return r0;
 }
 EXPORT_SYMBOL(scm_call_atomic5_3);
@@ -1236,3 +1323,140 @@
 		return false;
 }
 EXPORT_SYMBOL(scm_is_secure_device);
+
+
+static int __scm_call_no_remap_error(const struct scm_command *cmd)
+{
+	int ret;
+	u32 cmd_addr = virt_to_phys(cmd);
+
+	/*
+	 * Flush the command buffer so that the secure world sees
+	 * the correct data.
+	 */
+	__cpuc_flush_dcache_area((void *)cmd, cmd->len);
+	outer_flush_range(cmd_addr, cmd_addr + cmd->len);
+
+	ret = smc(cmd_addr);
+	return ret;
+}
+
+
+int scm_call_with_command(u32 svc_id, u32 cmd_id, u32 len, u32 buf_offset, 
+                          u32 resp_hdr_offset)
+{
+    struct scm_command cmd;
+    int ret;
+    cmd.len = len;
+    cmd.buf_offset = buf_offset;
+    cmd.resp_hdr_offset = resp_hdr_offset;
+	cmd.id = (svc_id << 10) | cmd_id;
+
+	printk(KERN_INFO "Sending Fully formed SCM Command\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc_id, cmd_id);
+	printk(KERN_INFO "len: %08X, buf_offset: %08X, resp_hdr_offset: %08X\n", cmd.len, cmd.buf_offset, cmd.resp_hdr_offset);
+    //printk(KERN_INFO "Response buffer address: virtual-%08X, physical-%08lX\n", ((unsigned)&cmd)+resp_hdr_offset, virt_to_phys((void*)(((unsigned)&cmd)+resp_hdr_offset)));
+    mutex_lock(&scm_lock);
+    ret = __scm_call(&cmd);
+	mutex_unlock(&scm_lock);
+	if (ret)
+		goto out;
+
+	printk(KERN_INFO "Finished SCM Call");
+
+out:
+    printk(KERN_INFO "Ret: 0x%08X\n", ret);
+	return ret;
+}
+EXPORT_SYMBOL(scm_call_with_command);
+
+/**
++ * scm_call_no_remap_error() - Send an SCM command without remapping the error code
++ * @svc_id: service identifier
++ * @cmd_id: command identifier
++ * @cmd_buf: command buffer
++ * @cmd_len: length of the command buffer
++ * @resp_buf: response buffer
++ * @resp_len: length of the response buffer
++ *
++ * Sends a command to the SCM and waits for the command to finish processing.
++ */
+int scm_call_no_remap_error(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
+		void *resp_buf, size_t resp_len)
+{
+	int ret;
+	struct scm_command *cmd;
+	struct scm_response *rsp;
+	unsigned long start, end;
+    size_t len;
+    
+	//DEBUG: Printing information about the outgoing request
+	printk(KERN_INFO "Sending SCM Command (no remap!)\n");
+	printk(KERN_INFO "SVC_ID: %d, CMD_ID: %d\n", svc_id, cmd_id);
+	if (cmd_buf != NULL) {
+		size_t i;
+		char* buffer = kmalloc(2*cmd_len+1, GFP_ATOMIC);
+		buffer[0] = '\0';
+		for (i=0; i<cmd_len; i++) {
+			char sub_buf[3];
+			sprintf(sub_buf, "%02X", ((unsigned char*)cmd_buf)[i]); 
+			strcat(buffer, sub_buf);
+		}
+		printk(KERN_INFO "CMD BUF: %s\n", buffer);
+		kfree(buffer);
+	}
+
+	len = SCM_BUF_LEN(cmd_len, resp_len);
+
+	if (len == 0 || PAGE_ALIGN(len) < len)
+		return -EINVAL;
+
+
+	cmd = kzalloc(PAGE_ALIGN(len), GFP_KERNEL);
+	if (!cmd)
+		return -ENOMEM;
+	
+
+	cmd->id = (svc_id << 10) | cmd_id;
+	if (cmd_buf)
+		memcpy(scm_get_command_buffer(cmd), cmd_buf, cmd_len);
+
+	mutex_lock(&scm_lock);
+	ret = __scm_call_no_remap_error(cmd);
+	mutex_unlock(&scm_lock);
+	if (ret)
+		goto out;
+
+	rsp = scm_command_to_response(cmd);
+	start = (unsigned long)rsp;
+
+	do {
+		scm_inv_range(start, start + sizeof(*rsp));
+	} while (!rsp->is_complete);
+
+	end = (unsigned long)scm_get_response_buffer(rsp) + resp_len;
+	scm_inv_range(start, end);
+
+	if (resp_buf)
+		memcpy(resp_buf, scm_get_response_buffer(rsp), resp_len);
+
+	//DEBUG
+	printk(KERN_INFO "Finished SCM Call");
+	if (resp_buf != NULL) {
+		size_t i;
+                char* buffer = kmalloc(2*resp_len+1, GFP_ATOMIC);
+                buffer[0] = '\0';
+                for (i=0; i<resp_len; i++) {
+                        char sub_buf[3];
+                        sprintf(sub_buf, "%02X", ((unsigned char*)resp_buf)[i]);
+                        strcat(buffer, sub_buf);
+                }
+		printk(KERN_INFO "RESP BUF: %s\n", buffer);
+                kfree(buffer);
+	}
+
+out:
+	kfree(cmd);
+	return ret;
+}
+EXPORT_SYMBOL(scm_call_no_remap_error);
diff -uNr aquaris-X-Pro-1.3.5_20170620-0532/drivers/soc/qcom/scm-xpu.c kernel/drivers/soc/qcom/scm-xpu.c
--- aquaris-X-Pro-1.3.5_20170620-0532/drivers/soc/qcom/scm-xpu.c	2017-07-19 16:32:34.000000000 +0200
+++ kernel/drivers/soc/qcom/scm-xpu.c	2018-06-29 10:54:20.733494986 +0200
@@ -32,7 +32,7 @@
 	struct scm_desc desc = {0};
 
 	desc.arginfo = SCM_ARGS(2);
-	desc.args[0] = cmd.config = ERR_FATAL_VAL;
+	desc.args[0] = cmd.config = 0x1;
 	desc.args[1] = cmd.spare = 0;
 
 	if (!is_scm_armv8())
@@ -49,4 +49,4 @@
 
 	return ret;
 }
-early_initcall(xpu_err_fatal_init);
+early_initcall(xpu_err_fatal_init); 
\ No newline at end of file
diff -uNr aquaris-X-Pro-1.3.5_20170620-0532/include/soc/qcom/scm.h kernel/include/soc/qcom/scm.h
--- aquaris-X-Pro-1.3.5_20170620-0532/include/soc/qcom/scm.h	2017-07-19 16:32:34.000000000 +0200
+++ kernel/include/soc/qcom/scm.h	2018-06-29 10:51:30.273440994 +0200
@@ -97,6 +97,9 @@
 #ifdef CONFIG_MSM_SCM
 extern int scm_call(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,
 		void *resp_buf, size_t resp_len);
+extern int scm_call_no_remap_error(u32 svc_id, u32 cmd_id, const void *cmd_buf, size_t cmd_len,void *resp_buf, size_t resp_len);
+extern int scm_call_with_command(u32 svc_id, u32 cmd_id, u32 len, u32 buf_offset, 
+                          u32 resp_hdr_offset);
 
 extern int scm_call2(u32 cmd_id, struct scm_desc *desc);
 
@@ -106,7 +109,6 @@
 		size_t cmd_len, void *resp_buf, size_t resp_len,
 		void *scm_buf, size_t scm_buf_size);
 
-
 extern s32 scm_call_atomic1(u32 svc, u32 cmd, u32 arg1);
 extern s32 scm_call_atomic1_1(u32 svc, u32 cmd, u32 arg1, u32 *ret1);
 extern s32 scm_call_atomic2(u32 svc, u32 cmd, u32 arg1, u32 arg2);
@@ -234,4 +236,4 @@
 	return false;
 }
 #endif
-#endif
+#endif 
\ No newline at end of file
diff -uNr aquaris-X-Pro-1.3.5_20170620-0532/include/uapi/linux/qseecom.h kernel/include/uapi/linux/qseecom.h
--- aquaris-X-Pro-1.3.5_20170620-0532/include/uapi/linux/qseecom.h	2017-07-19 16:32:34.000000000 +0200
+++ kernel/include/uapi/linux/qseecom.h	2018-06-29 10:51:30.273440994 +0200
@@ -7,6 +7,25 @@
 #define MAX_ION_FD  4
 #define MAX_APP_NAME_SIZE  64
 #define QSEECOM_HASH_SIZE  32
+
+struct __attribute__((packed)) qseecom_send_raw_scm_req {
+        uint32_t svc_id;
+        uint32_t cmd_id;
+        void *cmd_req_buf; /* in */
+        unsigned int cmd_req_len; /* in */
+        void *resp_buf; /* in/out */
+        unsigned int resp_len; /* in/out */
+};
+
+struct __attribute__((packed)) qseecom_send_atomic_scm_req {
+    uint32_t svc_id;
+    uint32_t num_args;
+    uint32_t arg1;
+    uint32_t arg2;
+    uint32_t arg3;
+    uint32_t arg4;
+};
+
 /*
  * struct qseecom_register_listener_req -
  *      for register listener ioctl request
@@ -346,12 +365,20 @@
 #define QSEECOM_IOCTL_SEND_MODFD_RESP \
 	_IOWR(QSEECOM_IOC_MAGIC, 21, struct qseecom_send_modfd_listener_resp)
 
+
+#define QSEECOM_IOCTL_SEND_RAW_SCM \
+        _IOWR(QSEECOM_IOC_MAGIC, 22, struct qseecom_send_raw_scm_req)
+
+   
 #define QSEECOM_IOCTL_SET_BUS_SCALING_REQ \
 	_IOWR(QSEECOM_IOC_MAGIC, 23, int)
 
 #define QSEECOM_IOCTL_UPDATE_KEY_USER_INFO_REQ \
 	_IOWR(QSEECOM_IOC_MAGIC, 24, struct qseecom_update_key_userinfo_req)
 
+#define QSEECOM_IOCTL_SEND_ATOMIC_SCM \
+	_IOWR(QSEECOM_IOC_MAGIC, 25, struct qseecom_send_atomic_scm_req)
+
 #define QSEECOM_QTEEC_IOCTL_OPEN_SESSION_REQ \
 	_IOWR(QSEECOM_IOC_MAGIC, 30, struct qseecom_qteec_modfd_req)
 
